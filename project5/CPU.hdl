// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15] , out=nMSB );
    Mux16(a=instruction , b=outInstruction  , sel=instruction[15] , out=AorC );

    // inserting into A according 15, 5 in instruction
    Or(a=nMSB,b=instruction[5],out=intoA);
    ARegister(in=AorC , load=intoA , out=Areg, out[0..14]=addressM);

    // checks if the 'a' is 0 or 1 (inM or Areg goes to ALU)
	And(a=instruction[15],b=instruction[12],out=AorM);
    Mux16(a=Areg , b=inM , sel=AorM , out=AorInM );

    //creating a temp Dreg to get inside the ALU
    And(a=instruction[15],b=instruction[4],out=intoD);
	DRegister(in=outRegD,load=intoD,out=Dreg);
    //computes with ALU the bits in instrucrion from 11 to 6
    ALU(x=Dreg , y=AorInM , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=outRegD, out = outM, out=outInstruction , zr=zr , ng=ng );
        
    //computimg the J(J1,J2,J3,zr,ng):
    Not(in=ng,out=pos);
	Not(in=zr,out=nzr);
    //do jump only if positive > 0
	And(a=instruction[15],b=instruction[0],out=jgt);
	And(a=pos,b=nzr,out=biggerthen);
	And(a=jgt,b=biggerthen,out=out1);
    //checking if output = 0
	And(a=instruction[15],b=instruction[1],out=jeq);
	And(a=jeq,b=zr,out=out2);
    //checking <0
	And(a=instruction[15],b=instruction[2],out=jlt);
	And(a=jlt,b=ng,out=out3);
    //taking the final result
	Or(a=out1,b=out2,out=out1or2);
	Or(a=out3,b=out1or2,out=final);

    //dealing with outputs

    // write M - if MSB and 'a' == 1
    And(a=instruction[15],b=instruction[3],out=writeM);
    //outputing pc
	PC(in=Areg,load=final,inc=true,reset=reset,out[0..14]=pc);
    

    
}